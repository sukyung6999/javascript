7장_연산자


  1. 산술 연산자

  - 이항 산술 연산자 : 2개의 피연산자가 필요함
    + - * / %

  - 단항 산술 연산자 : 1개의 피연산자가 필요함
    ++ : 피연산자를 바꿈
    -- : 피연사자를 바꿈
    + : 피연산자를 바꾸지 않음
    - : 피연산자를 바꾸지 않음

      예제) var x = false; 
        console.log(-x); // 0
        console.log(x); // false

  - 문자열 결합 연산자 : 피연산자 중 하나 이상이 문자일 경우 문자로 반환
    + 
    ㄴ 암묵적 타입 변환이 이뤄짐

  ------------------------------------------------------------

  2. 할당 연산자
  =
  :우항에 있는 피연산자가 연산이 되어 좌항에 있는 변수에 할당됨
  
    ㄴ 할당문은 표현식이기에 우항에 할당문이 들어갈 수 가 있으므로, 연쇄할당이 가능하다

  ------------------------------------------------------------

  3. 비교 연산자
    : 좌항과 우항을 비교한뒤 불리언 값을 반환함

    - 동등 비교 연산자 : 좌항과 우항의 값이 같음 ("암묵적 타입 변환"을 한 후에 비교를 함)
      ==

    - 일치 비교 연산자 : 좌항과 우항의 값이 같음 + 좌항과 우항의 타입도 같음
      ===

    ** NaN은 자신과 일치하지 않는 유일한 값이다
      단, 숫자가 NaN인지 확인하려면 빌트인 함수 Number.isNaN(값)으로 불리언 값으로 반환해줌

    ** object.is(피연산자, 피연산자) 로 보다 정확한 비교 연산이 가능함!! 
      예)
      동등 비교 연산자(==)와 일치 비교 연산자(===)는 -0과 +0 그리고 NaN 과 NaN을 같다고 알려주지만, 
      object.is(-0, +0)로 검사하면 false,
      object.is(NaN, NaN)로 검사하면 true로 알려줌

    - 대소 관계 연산자
      ( > < >= <= )

  ------------------------------------------------------------
  4. 삼항 조건 연산자 

  첫번째 피연산자가 조건식이여서 
  삼항 조건 연산자 표현식은 조건문이다
  따라서 if...else 조건문으로 바꿔서 쓸수도 있음

  but

  if...else문과 다른점은,
  삼항 조건 연산자는 값으로 표현될 수 있으나
  if...else문은 그렇지 않다

  * 팁 : 조건에 따라 값이 결정되어야 한다면 삼항 조건 연산자를 쓰는 게 유용 
        (단 조건이 하나일 때만!)

  ------------------------------------------------------------

  5. 논리 연산자
    || && !

    - 논리 부정 연산자 (!)
    : 불리언 값으로 표현되나 피연산자가 불리언 타입일 필요는 없음 (암묵적 타입 변환을 함)

    - 논리합(||), 논리곱(&&)
    : 불리언 값이 아닐 수 있음 ?? 
    피연산자 중 어느 한쪽으로 평가됨 ?? (9장에 나옴)

    드 모르간의 법칙
    !(x || y) === (!x && !y)
    !(x && y) === (!x || !y)

  6. 쉼표 연산자 ,

  7. 그룹 연산자 ()

  8. typeof 연산자
  그런데 7개의 모든 타입을 반환하지 못한다 (일종의 자바스크립트 버그)

  예제)
  typeof '' // string
  typeof 1 // Number
  typeof NaN // Number
  typeof true // boolean
  typeof undefined // undefined
  typeof Symbol() // Symbol
  typeof null // object
  typeof [] // object
  typeof {} // object
  typeof new Date() // object
  typeof /test/gi // object
  typeof function () {} // function 

  *[팁] null 타입인지 확인하려면 일치 비교 연산자를 사용하면 됨
  var foo = null;

  typeof foo === null; // false
  foo === null; // true 

  9. 지수 연산자 **
  좌항 피연산자 : 밑
  우항 피연산자 : 지수

  - 지수 연산자는 ES7부터 도입됨.
    이전에는 Math.pow(밑, 지수) 를 씀.

  - 지수 연산자의 결합 순서는 우항에서부터 좌항으로, 우결합성을 갖는다

  - 음수 자체를 거듭제곱하려면 괄호로 묶어야 함
    예) (-2) ** 2

  - 할당 연산자로도 사용가능! **=
    예제) 
    let num = 2;
    num **= 2;

  - 이항 연산자 중에서 가장 우선순위가 높음!

  10. 그 외 연산자들도 존재함

  11. 우선순위
  16순위로 나눠짐.. 이걸 다 외우기 어려우니 
  연산자 중에서 가장 우선순위가 높은 
  결합 연산자 ()를 사용해서 우선순위를 명시적으로 조절하는 것을 권장