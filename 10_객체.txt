10장_객체

  원시값과 객체값

  원시 타입은 "단 하나만의 값"만 나타냄 =? 문자열의 변수엔 문자얼 값 하나만 들어감 거기에 숫자나 다른 값이 들어가지 않음 이런걸 말하는거겠지?
                                =? 원시값은 변경 불가능한 값이라는게 const처럼 한번 선언하면 값을 변경할 수 없다는건지 타입을 바꿀수없다는 말인지? 이해가 안됨 ?????????????????????
  
  객체 타입은 "다양한 타입의 값"을 하나의 단위로 구성, 복잡한 자료구조임 =? 객체값은 변경 가능한 값 ????? 이것도 무슨말이지????????????????? 11장에서 설명해준다 함 넘어가자
                                                        
------------------------------------------------------------

1. 객체
  0개 이상의 프로퍼티로 구성된 집합
  객체는 프로퍼티와 메서드로 구성됨

  프로퍼티 : 객체의 상태를 나타내는 값 (상태 데이터)
  메서드 : 프로퍼티를 참조하고 조작할 수 있는 동작
  
  프로퍼티 = 키 + 값
  => 키 : 
  => 값 : 모든 값은 프로퍼티 값이 될 수 있음, 함수도 가능 (******** 일반 함수와 구분짓기 위해서 프로퍼티 값이 함수인 것을 메서드라고 부름)


  함수는 일급 객체임 =? 18장에서 설명해준다네.. 휴 다 후반부로 가야 알 수 있다니 빨리 알려줘어
  
------------------------------------------------------------

2. 객체 리터럴에 의한 객체 생성

  - 자바스크립트는 C++이나 자바와 달리
  다양한 객체 생성 방법을 지원함

  - 다양한 객체 생성 방법 중에서 
  가장 일반적인 방법이 객체 리터럴

  - {}내에 0개 이상의 프로퍼티를 정의 ============> 주의!! 객체 리터럴에서 중괄호는 코드 블록이 아니므로 세미콜론이 포함되어 있지 않음!

  - 시점 : 변수에 할당되는 시점에 객체 리터럴을 해석해서 객체 생성  

------------------------------------------------------------

3. 프로퍼티

  - 쉼표로 구분해서 나열
  
  - 프로퍼티 = 키 + 값

  3-1. 키
  - 빈 문자열 포함한 모든 문자열 또는 심볼 값
  - 키는 식별자 역할을 함
  - 반드시 네이밍 규칙을 지켜야하는 것은 아니지만, 지키지 않는 경우와 미묘한 차이는 있음

  [특징]
  ㄴ 따옴표를 사용해야하나, 
  네이밍 규칙을 준수하는 경우 따옴표 생략 가능 / 네이밍 규칙을 준수하지 않는 경우 따옴표 필수
  ㄴ 대괄호로 동적으로 키를 생성할 수 있음
  ㄴ 빈 문자열 가능, but 권장하지 않음
  ㄴ 문자열과 심볼 이외의 값으로 키를 사용하면, 문자열로 암묵적 타입 변환됨 (예: 숫자는 문자열로 변환됨)
  ㄴ 예약어(예: var, function)를 사용해도 에러가 발생하지 않으나, 예상치 못한 에러는 있을 수 있음
  ㄴ 키를 중복 선언하면 마지막에 선언한걸로 덮어 쓰여짐

  3-2. 값
  : 자바스크립트에서 사용할 수 있는 모든 값

------------------------------------------------------------

4.메서드
: 객체에 묶여있는 함수

12장, 22장에서 자세히... to be contiue ..

------------------------------------------------------------

5. 프로퍼티 접근

객체로 평가되는 표현식.프로퍼티 키

5-1. 마침표 프로퍼티 접근 연산자



5-2. 대괄호 프로퍼티 접근 연산자
    ㄴ 대괄호 안에 쓰이는 키는 반드시 따옴표로 감싸져 있어야 함  
    안그러면 식별자로 인식함
    !! 단, 숫자로 이뤄진 문자열일 경우 따옴표 생략 가능

    ㄴ 에러 유형
      - ReferenceError : 대괄호 안에 따옴표로 안 감싸져 있을 경우
      - undefined : 존재하지 않는 키로 프로퍼티에 접근했을때

    ㄴ 식별자 네이밍 규칙을 지키지 않는 경우라면,
      반드시 대괄호 프로퍼티 접근 연산자를 사용해야함


예제! 
const person = {
  firstName: 'sukyung',
  last-name: 'lee'
}

person.last-name 의 에러 형태는 두 가지임

1. Node.js 환경 => undefined 에러
  ㄴ last인 프로퍼티 키가 없고, name 식별자가 없어서(name을 식별자라고 하는건 - 연산자 뒤에 있어서)

2. 브라우저 환경 => NaN 에러
  ㄴ 브라우저에는 name이라는 전역 변수가 있어서(기본값은 빈 문자열),
  last 빼기 name으로 인식해서 NaN 에러가 뜸

------------------------------------------------------------

6. 프로퍼티 값 갱신

: 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티는 갱신됨

------------------------------------------------------------

7. 프로퍼티 동적 생성

: 존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티를 동적으로 생성

------------------------------------------------------------

8. 프로퍼티 삭제
delete 연산자

예)
const person = {
  age : 28
}

person.height = 197;

delete person.birth => 프로퍼티가 없는 경우에는 에러 없이 무시됨~

------------------------------------------------------------

9. 객체 리터럴의 확장 기능

  9-1. 프로퍼티 축약 표현
  프로퍼티 값을 변수로 사용할 경우 프로퍼티 키와 변수가 같으면, 프로퍼티 키를 생략할 수 있음

  9-2. 계산된 프로퍼티 이름
  "계산된 프로퍼티 이름"으로 프로포티를 동적 생성하려면 대괄호를 써야 한다
  객체 리터럴 내부에서도 "계산된 프로퍼티 이름" 사용 가능
  
  예)
  example[text + '_' + num] = 'haha'

  9-3. 메서드 축약 표현

  const person = {
    age : 28,
    height : 200,
    score: function () {
      console.log('your age is' + this.age);
    },
    score () { // 메서드 축약 표현
      console.log('your age is' + this.age);
    }
  }

  메서드 축약 표현으로 정의한 메서드는 프로퍼티에 할당한 함수와 다르게 동작???? 26장에서 자세히