12장_함수

1. 함수란
매개변수(parameter), 인수(argument), 반환값(return value)

function sample (x, y) { // 식별자, 매개변수
  return x + y; // 반환값
}
sample(2,5);// 인수

함수는 함수 정의를 통해 생성

  함수 정의하는 방법
  1) 함수 선언문
  function sample (x, y) { 
    return x + y; 
  }

  뒤에 4. 함수 정의에 방법이 더 나옴

------------------------------------------------------------

2. 함수를 사용하는 이유는 코드의 재사용이 가능하기 때문에 유지 보수의 편의성을 높이고, 코드의 신뢰성을 높임

1) 여러번 호출 가능
2) 실행 시점을 개발자가 정할 수 있음

------------------------------------------------------------

3. 함수 리터럴

함수는 객체 타입의 값임!!!!!!!!!
객체와 다른 점은, 함수만 호출할 수 있다는 것 그리고 함수만의 고유 프로퍼티가 있음

(리터럴은 값을 생성하기 위한 표기법)

------------------------------------------------------------

4. 함수 정의

1) 함수 선언문
function add (x, y) {
  return x + y;
}
=> 함수 리터럴과 동일하나, 함수선언문은 식별자 이름을 생략할 수 없다

  [함수 선언문 vs 함수 리터럴]
  - 함수 선언문은 표현식이 아닌 문 / 함수 리터럴은 표현식인 문
  - 차이점 : 문맥으로 해석
    자바스크립트 엔진은 변수에 할당하거나 피연산자로 쓰이는 경우엔 함수 리터럴로 평가하고, 그 외에는 함수 선언문으로 해석한다
    예 : ()는 그룹 연산자이고, 그룹 연산자의 피연산자는 값으로 평가되어야 함. 그래서 그룹 연산자 안에 있는 것은 객체 리터럴로 해석함
  - 호출의 차이
    함수는 함수 이름으로 호출하는 것이 아닌, 함수 객체가 할당된 식별자로 호출하는 것이다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 전혀 몰랐던 내용!!!!!!!!!!!!!!!꼭 기억하자
    함수 선언문 : 외부에서 참조 가능, 자바스크립트 엔진은 함수 이름과 동일한 이름으로 식별자를 암묵적으로 생성 후 함수 객체를 할당함
    함수 리터럴 : 함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자. 즉, 외부에서 참조할 수 없는 식별자임 

2) 함수 표현 식 
var add = function (x, y) {
  return x + y;
}

함수는 객체임
+
함수는 배열의 요소으로도, 프로퍼티의 값으로도, 변수에 할당될 수 있음
=
함수는 일급 객체(값의 성질을 갖는 객체) 임

  [주의] 함수 이름은 함수 몸체 내부에서만 사용할 수 있음, 함수를 호출하려면 함수를 할당한 식별자로 호출해야함
  예: 
  var add = function foo (x,y) {
    return x + y;
  }
  add(2,3);


3) Function 생성자 함수
var add = new Function ('x', 'y', 'return x + y');

4) 화살표 함수 
var add = (x,y) => {
  return x + y;
}

함수 생성 시점과 함수 호이스팅

