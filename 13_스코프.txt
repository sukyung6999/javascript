13장_스코프

  13-1. 스코프(유효범위) : 식별자가 유효한 범위

        렉시컬 환경(코드의 문맥) : 코드가 어디서 실행되며 어떤 코드가 있는지

      var 키워드는 동일 스코프내에서 중복 선언이 되어도 처음이후에 선언된 var 키워드는 무시함
      let, const 키워드는 동일 스코프 내에서 중복 선언되지 않는다.

------------------------------------------------------------

  13-2. 스코프의 종류
  1) 전역 : 코드 가장 바깥
  2) 지역 : 함수 몸체 내부 

------------------------------------------------------------

  13-3. 스코프 체인

  중첩 함수에서 스코프는 계층적 구조를 갖는다.
  
  (전역 스코프)
    ㄴ 외부 함수 (상위 스코프)
      ㄴ 중첩 함수

  자바스크립트 엔진은
  변수를 참조하는 스코프에서 시작해서 
  상위 스코프 방향으로 이동하며 선언된 변수를 검색

  자바스크립트 엔진은 코드를 실행하기 전에
  렉시컬 환경(스코프 체인를 물리적인 실체로!)을 실제로 생성 후
  변수 식별자가 렉시컬 환경에 키로 등록
  변수 할당이 일어나면, 해당 구조에 값을 변경

------------------------------------------------------------

  13-4. 함수 레벨 스코프

  코드 블럭이 아닌 함수에 의해서만 지역 스코프가 생성

  블록 레벨 스코프 : 코드 블럭이 지역 스코프를 만듬 (let, const 키워드)
  함수 레벨 스코프 : var 키워드로 선언된 변수는 무조건 함수 내부에서만 지역 스코프를 만듬

------------------------------------------------------------

  13-5. 렉시컬 스코프

  함수를 어디에서 "호출"했는가 => 동적 스코프
  함수를 어디에서 "선언"했는가 => 렉시컬 스코프 또는 정적 스코프

  자바스크립트는 렉시컬 스코프를 따름!!

  따라서,
  var x = 1;

  function foo () {
    var x = 10;
    bar();
  }

  function bar () {
    console.log(x);
  }

  foo(); // 1
  bar(); // 1