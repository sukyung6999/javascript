17장_생성자 함수에 의한 함수 생성

  17-1. Object 생성자 함수

  생성자 함수란? 
  new 연산자와 함께 호출하여 객체(인스턴스: 생성자 함수에 의해 생성된 객체)를 생성하는 함수
  일반 함수와 동일한 방식으로 생성자 함수를 정의하고, new 연산자와 함께 호출하면 생성자 함수처럼 동작함

  Object 생성자 외에 빌트인 생성자 함수 : String, Number, Boolean, Function, Array, RegExp, Date

  const person = new Object ();

  // 프로퍼티
  person.name = 'lee';
  person.callName = function () {
    console.log(`my name is ${this.name}`);
  }

------------------------------------------------------------

  17-2. 생성자 함수

  1) 객체 리터럴에 의한 객체 생성 방식의 문제점
  객체 리터럴은 직관적, 간편 but 단 하나의 객체만 생성
  프로퍼티 값은 달라도, 메서드 내용은 같을 수 있음

  예시 시작 >>>>>
  const circle1 = {
    radius: 5,
    getDiameter () {
      return 2 * this.radius;
    }
  };

  const circle2 = {
    radius: 10,
    getDiameter () {
      return 2 * this.radius;
    }
  };

  <<<< 예시 끝

  ======================================================

  2) 생성자 함수에 의한 객체 생성 방식의 장점
  객체(인스턴스)를 생성하기 위한 템플릿(클래스)처럼 생성자 함수를 사용하여
  프로퍼티 구조가 동일한 객체를 여러개 생성할 수 있음
  
  예시 시작 >>>>

  function Circle (radius) {
    this.radius: radius,
    getDiameter () {
      return 2 * this.radius
    }
  }

  const circle1 = new Circle (5);

  console.log(circle1.getDiameter); // 10


  const circle3 = circle(15) // 일반 함수로 호출됨

  console.log(circle3); // undefined임 왜냐면 반환문이 없어서 암묵적으로 undefined로 반환??????????

  console.log(radius); // 15임... circle 함수는 일반 함수로 호출되었고 일반 함수내 this는 전역객체를 가리킴

  <<<<< 예시 끝 

  ======================================================

  3) 생성자 함수의 인스턴스 생성 과정

  [[생성자 함수의 역할]]
  a. 메서드 구조가 동일한 객체(인스턴스)를 생성하기 위한 템플릿
  b. 생성된 인스턴스 초기화

    예시 시작 >>>>>
    function Circle (radius) { // [1]인스턴스 초기화, 자바스크립트 엔진은 암묵적으로 인스턴스를 생성하고 반환한다
     
      this.radius: radius,// [2] 초기화
      this.getDiameter = function () {
        return 2 * this.radius;
      }

      // [3] 완성된 인스턴스가 바인딩된 this가 암묵적으로 반환

      return {} // [*] 만약 this가 아닌 객체를 명시적으로 반환한다면, this가 반환되지 못하고 명시한 객체를 반환함
      return 100; // [*] 만약 this가 아닌 원시값을 반환한다면, 원시값은 무시되고 암묵적으로 this가 반환됨
    }

    const circle1 = new Circle(5);

    <<<<< 예시 끝

  [[인스턴스 생성 과정]]
  : new 연산자와 함께 생성자 함수를 호출하면, 암묵적으로 인스턴스를 생성하고
  인스턴스를 초기화
  그리고 암묵적으로 인스턴스를 반환

  [1] 인스턴스 생성과 this 바인딩
  : 암묵적으로 빈 객체(생성자 함수가 생성한 인스턴스)가 생성
  인스턴스는 this에 바인딩(바인딩: 식별자와 값을 연결)

  [2] 인스턴스 초기화

  [3] 인스턴스 반환

  [4] 생성자 함수 내부에서는 반드시 return문은 생략해야함

  
  [[내부 메서드]] : [[Call]] [[Construct]]

  예시 시작 >>>>>

  function foo () {}

  foo.prop = 10;

  foo.method = function () {
    console.log(this.prop);
  }
  
  foo.method; // 10

  함수는 객체이나 일반 객체와 달리 호출할 수 있다
  따라서 일반 객체가 가지고 있는 내부 메서드, 내부 슬롯 
  +
  함수를 동작하기 위해 필요한 [[Environment]], [[Formal Parameters]]등의 내부 슬롯과
  [[Call]], [[Construct]] 등의 메서드를 가지고 있음
    ㄴ 함수가 일반 함수로 호출되면 함수 객체의 내부 메서드 [[Call]]가 호출
    ㄴ new 연산자와 함께 호출되면 [[Construct]] 내부 메서드를 호출

  callable: [[Call]] 내부 메서드를 갖는 함수 객체 // 모든 함수 객체는 호출 할 수 있음
  constructor: [[Construct]] 내부 메서드를 갖는 함수 객체 // 생성자 함수 객체만 가능
  non-constructor: [[Construct]] 내부 메서드를 갖지 않는 함수 객체

  즉, 모든 함수 객체는 부를 수 있지만 모두 생성자 함수로 호출할 수 있지 않는다

  예시 시작 >>>
  function foo () {};
  const bar = function () {};
  const baz = {
    x: function () {}
  }

  new foo();
  new bar();
  new baz.x(); 
  // 일반 함수로 정의된 함수만 constructor

  const arrow = () => {};
  new arrow(); // TypeError
  // 화살표 함수는 non-constructor

  const obj = {
    x () {

    }
  }
  new obj.x(); // TypeError

  * 일반적으로 메서드를 프로퍼티 값이 함수인 경우를 통칭하지만,
  메서드 축약 표현만이 메서드이고, 축약 표현된 메서드와 화살표 함수는 non-constructor이다

  [[new 연산자]]

  예시 시작 >>>>>

  function add (x,y) {
    return x + y;
  }

  const inst = new add();
  cosnole.log(inst); // 생성자 함수로 사용하지 않으려고 했던 일반 함수이기 때문에 무시됨

  function createUser (name, role) {
    return {name, role};
  }

  const user = new createUser('sukyung','junior');
  console.log(user); {name: 'sukyung', role: 'junior'};

  [[new.target]]
  함수 내부에서 new.target을 사용하면, 
  new 연산자와 함께 생성자 함수로 쓰이고 있는지 알수 있음

  - new 연산자와 함께 생성자 함수로 호출되었으면, new.target은 함수 자신을 가리키고,
  - new 연산자와 함께 호출되지 않았다면, undefined를 반환

  예시 시작 >>>>>
  function Circle (radius) {
    if (!new.target) {
      return new Circle(radius);
    }

    this.radius: radius,
    this.getDiameter: function () {
      return 2 * this.radius;
    }
  }

  const circle = Circle(5);

  ** Object와 Function은 new 연산자와 함께 호출되지 않더라도 함께 호출된것처럼 됨
  String, Number, Boolean은 new 연산자와 함께 호출해야지만 객체가 아니면, 문자열, 숫자, 불리언값이 됨