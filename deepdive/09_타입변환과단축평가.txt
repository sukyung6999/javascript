9장_타입변환과 단축평가

1. 타입 변환
  : 기존 값의 타입을 변환시키는 것이 아니라
  다른 타입의 새로운 값을 생성함

  1-1. 명시적 타입 변환
  장점 : 개발자의 주도하에 변환을 하기 때문에 오류를 발생시키지 않음
  단점 : 가독성이 떨어짐

  1-2. 암묵적 타입 변환
  장점 : 가독성이 좋음
  단점 : 개발자가 예상치 못한 암묵적 변환을 마주하면 오류를 발생시킬 수 있음

------------------------------------------------------------

2. 암묵적 타입 변환

 2-1. 문자열 타입 변환
      : 문자열 연결 연산자 역할은 문자열 값을 만드는 것
      피연산자를 코드 문맥상 문자열로 변환할 뿐만 아니라
      리터럴의 표현식 삽입(예: `1 + 1 = ${1 + 1}`)에서도 표현식의 결과를 문자열로 변환함

 2-2. 숫자 타입 변환
      : 산술 연산자, 비교 연산자의 역할은 숫자 값, 불리언 값을 만드는 것
      비교 연산자는 크기를 비교하기 위해서는 피연산자들이 숫자여야 하는데, 숫자가 아닌 피연사자를 암묵적 변환함

      빈 문자열 '' 
      빈 배열 []
      null
      false
      는 숫자 0으로 암묵적 변환

      true
      는 숫자 1로 암묵적 변환

2-3. 불리언 타입 변환
      : 불리언 타입이 아닌 값을 truthy, falsy로 구분함


      [falsy인 값]
      ''
      null
      false
      undefined
      0, -0
      NaN

      [truthy인 값] = falsy인 값을 제외한 나머지

    !! : 느낌표를 두번 사용하면 불리언 타입으로 명시적 변환

------------------------------------------------------------

3. 명시적 변환

-표준 빌트인 생성자 함수 (String, Number, Boolean)을 new 연산자 없이 명시적으로 타입 변환 가능
-빌트인 매서드

** 표준 빌트인 생성자 함수 : 객체를 생성하기 위한 함수 , new 연산자와 함께 쓰임

3-1. 문자열 타입 변환

    a) 빌트인 생성자 함수 : String
      예 : String(NaN) // "NaN"

    b) 빌트인 메서드 : Object.prototype.toString
      예 : (NaN).toString()  // "NaN"

    c) 문자열 연결 연산자

3-1. 숫자 타입 변환

    a) 빌트인 생성자 함수 : Number
      예 : Number(true) // 1

    b) 빌트인 메서드 : Object.prototype.parseInt, Object.prototype.parseFloat
      => 단, 문자열만 숫자로 변환 가능
      예 : parseInt("5.32")  // 5.32

    c) +단항 연결 연산자
    d) * 산술 연결 연산자

3-1. 불리언 타입 변환

    a) 빌트인 생성자 함수 : Boolean
      예 : Boolean(NaN) // false

    b) !! 느낌표 두번 사용

------------------------------------------------------------

4. 단축 평가
  : 피연산자를 타입 변환시키지 않고 값을 반환함

4-1. 논리합과 논리곱
  논리합(||), 논리곱(&&) 연산자의 표현식의 결과는 불리언 타입이 아닐수도 있다

  논리합은 
  - 첫 번째 피연산자가 true인 경우 : 첫 번째 피연산자의 값이 결과값이 됨
  - 첫 번째 피연산자가 false이고,
    두 번째 피연산자가 true일 경우 : 두 번째 피연산자의 값이 결과값이 됨

  논리곱은
  - 첫번째 피연산자의 값이 true, 두 번째 피연산자의 값이 true 일때 : 두 번째 피연산자 값이 결과값이 됨
    (나머지의 경우에는 falsy인 값을 반환)

4-2. 단축 평가의 활용

  a) 객체에 값이 null 또는 undefined가 아닌지 판별할 때

  b) 함수 매개변수에 기본값을 설정할 때 
    함수 매개변수에 아무것도 넣지 않으면, 매개변수가 undefined가 됨으로써 생기는 에러를 방지하고자!
    불리언 타입이 아닌 기본값을 그대로 반환

------------------------------------------------------------

4-3. 옵셔널 체이닝 ?. (ES11에서 도입)
     
     좌항 피연산자?.프로퍼티

     :좌항피연산자가 null 또는 undefined 일 때 undefined를 반환하며, 
     값이 있을땐 값의 프로퍼티 참조 (* 프로퍼티 참조란,, 10장에서 프로퍼티 접근에서 자세히!)

    ES11 이전에는 논리곱 연산자 (&&)를 활용
    그러나, 논리곱 연산자는 좌항 연산자가 falsy일 경우 단축 평가로 좌항 연산자를 반환

  ** 빈 문자열이나 0은 객체로 평가될 때 도 있음

------------------------------------------------------------

4-4. null 병합 연산자 ?? (ES11에서 도입)
     좌항 피연산자 ?? 우항 피연산자

     : 좌항 피연산자가 null 또는 undefined일때 우항 피연산자를 반환함
     (반대의 null 또는 undefined이 아니면 좌항 피연산자를 반환함)

    ES11 이전에는 논리합 연산자 (||)를 활용
