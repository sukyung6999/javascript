16장_property attribute

  16-1. 내부 슬롯, 내부 메서드
  내부 슬롯, 내부 메서드는
  자바스크립트 엔진의 구현 알고리즘을 설명하기 위해
  ECMA script 사양에서 사용하는 의사 property?와 의사 메서드?이다

  이중 대괄호로 감싼 이름들이 내부 슬롯과 내부 메서드이다?

  모든 객체는 [[prototype]]이라는 내부 슬롯을 갖는다
  내부 슬롯은 자바스크립트 엔진의 내부 로직이므로 원칙적으로 접근할 수 없음
  그러나, [[prototype]] 내부 슬롯은 __proto__를 통해 간접적으로 접근할 수 있음

  const a = {};

  a.[[prototype]] // SyntaxError 자바스크립트 내부 로직이므로 접근할 수 없음
  a.__proto__ // 간접적으로 접근할 수 있는 방법

------------------------------------------------------------

  16-2. "property attribute"와 "property descript 객체"

  property attribute는 
  property를 생성할때 property attribute를 자동으로 기본값이 있는 상태로 정의함

  property attribute에는 
  [[상태값]], [[갱신(변경) 가능 여부]], [[열거 가능 여부]], [[재정의 가능 여부]]
  내부 슬롯들이 있음

  property attribute에 직접 접근할 수는 없지만,
  getOwnPropertyDescriptor 메서드를 사용해서 간접적으로 접근할 수 있음

  getOwnPropertyDescriptor는 "property descriptor 객체"를 반환함

  예시: 
  const person = {
    name: 'lee'
  }

  object.getOwnPropertyDescriptor(person, 'name'); // {value: 'lee', writable: true, enumerable: true, configurable: true}

------------------------------------------------------------

  16-3. "data property" & "accessor property"

  property는 1)data property와 2)accessor property로 구분
  data property와 accessor property의 descriptor property가 다름

  1) data property
  : 키와 값으로 구성된 일반적인 property
  
  data property는 16-2에서 얘기한 property attribute를 갖는다
  data property attribute: [[Value]], [[Writable]], [[Enumerable]], [[Configurable]]

  - [[Value]] : 값 
  - [[Writable]] : 변경 가능 여부
  - [[Enumerable]] : for...in이나 Object.key 등으로 열거할 수 없음
  - [[Configurable]] : 프로퍼티 삭제, property attribute를 변경할 수 없음 (단, writable이 true인 경우, value 변경과 writable을 false로 변경하는 것은 가능)

  2) accessor property
  : 자체적으로 값을 갖고 있지 않고 data property의 a.값을 읽거나 b.저장할때 호출하는 접근자 함수로 구성된 프로퍼티

  accessor property attribute : [[Get]], [[Set]], [[Enumerable]], [[Configurable]]

  - [[Get]] : 다른 데이터의 프로퍼티 읽을 때 호출되는 접근자 함수
              즉, 프로퍼티 키로 프로퍼티 값에 접근하면, property attribute인 [[Get]]의 값인 getter 함수가 호출되어 프로퍼티 값을 반환
  
  - [[Set]] : accessor property를 통해 data property의 값을 저장할 때 호출되는 접근자 함수
              즉, 프로퍼티 키로 프로퍼티 값을 저장하면, property attribute의 [[Set]]의 값인 setter 함수가 호출되어 프로퍼티 값을 저장함

  예제:
  
  const person ={
    firstName: 'sukyung',
    lastName: 'lee',
    get fullName () {
      return `${this.firstName} ${this.lastName}`
    },
    set fullName (name) {
      [this.firstName, this.lastName] = name.split(' ');
    }
  }

  console.log(person.fullName); // sukyung lee

  person.fullName = 'sugil lee';
  console.log(person); // {firstName: 'sugil', lastName: 'lee'}

  console.log(person.fullName); // sugil lee

  let descriptor = Object.getOwnPropertyDescriptor(person,'firstName');
  console.log(descriptor)// 'sugil'

  descriptor = Object.getOwnPropertyDescriptor(person, 'fullName');

------------------------------------------------------------

  16-4. property 정의

  defineProperty 메서드로 property attribute를 정의할 수 있음

  예시 시작 >>>>

  const person = {};

  Object.defineProperty = (person, 'firstName', {
    value: 'sukyung',
    writable: true,
    enumerable: true,
    configurable: true
  } )

  Object.defineProperty(person, 'lastName', {
    value: 'lee'
  });
  // 이렇게 attribute을 생략하게 되면 기본값으로 false가 들어감

  console.log(Object.keys(person)); // ['firstName'] 'lastName'은 enumerable이 false여서 안나옴

  delete person.lastName // 이게 안됨, 'lastName'은 configurable이 false여서 삭제가 안됨

  Object.defineProperty(person, 'fullName', {
    get () {
      return `${this.firstName} ${this.lastName}`;
    },
    set (name) {
      [this.firstName, this.lastName] = name.split(' ');
    },
    enumerable: true,
    configurable: true
  })

  <<<<< 예시 끝 

  여러개의 프로퍼티를 정의할 땐,
  Object.defineProperties

  예시: 
  Object.defineProperties(person, {
    firstName: {
      value: 'sukyung',
      writable: true,
      enumerable: true,
      configurable: true
    },
    firstName: {
      value: 'sukyung',
      writable: true,
      enumerable: true,
      configurable: true
    },
    fullName: {
      get () {

      },
      set () {
        
      },
      enumerable,
      configurable
    },
    ...
  })

------------------------------------------------------------

16-5. 객체 변경 방지

  1) 객체 확장 금지 (Object.preventExtensions)
  프로퍼티 추가 금지를 말함

  + 확장 가능한 객체인지는 isExtensible 메서드로 확인 가능함

  예시 시작 >>>>>
  const person = {name: 'lee'}
  console.log(person.isExtensible); // true

  person.preventExtensions 
  console.log(person.isExtensible); // false

  <<<< 예시 끝

  2) 객체 밀봉 (Object.seal)
  : 추가, 삭제, attribute 재정의 금지! only 읽기와 쓰기만 가능

  + 밀봉된 객체인지는 isSealed 메서드로 확인 가능함

  예시 시작 >>>>
  const person = {name: 'sukyung'};
  console.log(person.isSealed); // false

  person.seal;
  console.log(person.isSealed); // true 

  const descriptor = Object.getOwnPropertyDescriptor(person);
  console.log(descriptor); 
  // {name: {value: 'sukyung', writable: true, enumerable: true, configurable: false}}

  person.name = 'sugil'; // 갱신은 가능함~!

  3) 객체 동결 (Object.freeze)
  : 추가, 삭제, 갱신, attribute 재정의 금지! Only 읽기만 가능

  + 밀봉된 객체인지는 isFrozen 메서드로 확인 가능함

  4) 불변 객체
  : 위의 메서드들은 얕은 객체 변경 방지이기 때문에 직속 프로퍼티에만 영향을 줌
  중첩 객체의 프로퍼티에도 영향을 주려면
  모든 프로퍼티에 대해 재귀적으로 Object.freeze를 호출해야 함

  예시 시작 >>>>

  function deepFreeze (target) {
    if (target && typeof target === 'object' && target.isFrozen) {
      Object.freeze(target);
    }
    Object.keys(target).forEach((key) => deepFreeze(target[key]))

    return target
  }

  const person = {
    name: 'sukyung',
    address: {
      city: 'Seoul'
    }
  }

  deepFreeze(person);