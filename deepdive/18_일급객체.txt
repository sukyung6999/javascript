18장_일급객체

  일급객체 조건
  1. 무명의 리터럴로 만들 수 있음, 런타임 이전에 생성

  2. 변수나 자료구조(객체, 배열)에 저장할 수 있음

  3. 함수의 매개변수에 전달할 수 있음

  4. 함수의 반환값으로 사용할 수 있음

  const increase = function (num) { // 1번, 2번에 해당
    return num++;
  }

  const decrease = function (num) {
    return num--;
  }

  const auxs = {increase, decrease}; // 2번에 해당

  function makeCounter(aux) {
    let num = 0;
    
    return fucntion () { // 4번에 해당
      num = aux(num);

      return num;
    }
  }

  const increaser = makeCounter(auxs.increase); // 3번
  console.log(increaser);// 1
  console.log(increaser);// 2

  const decreaser = makeCounter(auxs.decrease);
  console.log(decreaser);//1
  console.log(decreaser);//0

------------------------------------------------------------

  18-2. 함수 객체의 프로퍼티 

  함수는 객체다.
  그러니 property를 가질 수 있음
  함수는 고유의 property를 가짐

  예시 시작 >>>>>

  function square (num) {
    return num * num;
  }

  console.log(Object.getOwnPropertyDescriptor(square));
  
  // 
  {
    length: {value: 1, writable: false, enumerable: false, configurable: false},
    name: {value: 'square', writable: false, enumerable: false, configurable: true},
    arguments: {value: null, writable: false, enumerable: false, configurable: false},
    caller: {value: null, writable: false, enumerable: false, configurable: false}, 
    prototype: {value: {}, writable: true, enumerable: false, configurable: false}
  }

  console.log(Object.getOwnPropertyDescriptor(square, '__proto__')); // undefined
  console.log(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__')); // square 함수는 Object.prototype로부터 __proto__ 접근자 프로퍼티를  상속 받는다 // {get: f, set: f, enumerable: true, configurable: false}

  __proto__ accessor property는 Object.prototype으로부터 상속 받고,
  모든 객체는 Object.prototype으로부터 __proto__ accessor property를 상속받을 수 있다

  ======================================================

  [1] arguments
  arguments 프로퍼티 값은 argrument 객체이다.
  Arguments[1, callee: multiply(x,y), length: 1]

  함수 호출시 전달된 인수(argument) 정보를 담고 있는 유사배열 객체이고,
  함수 내부에서 지역 변수로 사용됨

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  예시 시작 >>>>>

  function multiply (x, y) {
    return x * y;
  }

  자바스크립트는 매개변수와 인수의 개수가 일치하는지 확인하지 않음
  따라서, 매개변수 개수만큼 인수를 전달하지 않아도 에러가 발생하지 않음
  multiply(); // NaN
  multiply(1); // NaN

  함수의 매개변수는 지역 변수처럼 사용되고, 전달된 인수가 할당되기 전에 undefined로 초기화된다.

  매개변수의 개수를 초과해서 전달된 인수는 무시됨
  초과된 인수가 그냥 버려지는 것은 아니고 암묵적으로 arguments 객체의 프로퍼티에 저장됨
  multiply(1,2,3); // 3은 무시됨

  <<<<< 예시 끝

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
  - arguments 객체의 키는 인수(arguments)의 순서,
    arguments 객체의 값은 인수(arguments)의 값

  - arguments 객체의 callee 프로퍼티는 인수를 전달할 함수

  - arguments 객체의 length 프로퍼티는 인수 개수

  - arguments 객체의 Symbol 프로퍼티는 argruments를 순회 가능한 구조로 만들게 해줌

    예시 시작 >>>>>
    function multiply (x,y) {
      const iterator = arguments[Symbol.iterator]();

      console.log(iterator.next()); // {value: 1, done: false};
      console.log(iterator.next()); // {value: 2, done: false};
      console.log(iterator.next()); // {value: 3, done: false};
      console.log(iterator.next()); // {value: undefined, done: true};

      return x * y;
    }

    multiply(1,2,3);

    <<<<< 예시 끝

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  매개변수 개수를 확정할 수 없을 때, arguments 객체를 활용할 수 있음

  예시 시작 >>>>>

  function sum () {
    const res = 0;

    for (let i = 0; i < argruments[length]; i++) {
      res += argruments[i];
    }

    return res;
  }

  console.log(sum()); // 0
  console.log(sum(1)); // 1
  console.log(sum(1,2)); // 3
  
  ======================================================

  [2] caller 프로퍼티

  : 비표준 프로퍼티

  ======================================================

  [3] length 프로퍼티

  매개변수의 개수

  예시 시작 >>>>>

  function foo () {}
  console.log(foo.length); // 0

  function bar (x) {
    return x;
  }
  console.log(bar.length) // 1

  * 주의 :
  arguments 객체의 length(인수의 개수)와
  함수의 length 프로퍼티(함수 매개변수의 개수)는 다름

  ======================================================

  [4] name 프로퍼티

  함수 객체의 name 프로퍼티는 함수 이름을 나타냄
  (ES6부터 정식 표준이 됨)

  함수 객체를 가리키는 식별자를 값으로 갖는다

  예시 시작 >>>>>
  [기명함수인 경우]
  const namedFunc = function foo () {};
  console.log(namedFunc.name); // foo

  [익명함수인 경우]
  const anonymous = function () {};
  console.log(anonymous.name); // anonymous

  ======================================================

  [5] __proto__ 프로퍼티
  모든 객체는 [[prototype]]이라는 내부 슬롯을 가짐
  __proto__ 프로퍼티는 [[prototype]]이라는 내부 슬롯에 접근하기 위해 사용하는 접근자 프로퍼티


  예시 시작 >>>>>
  const obj = {a: 1};
  console.log(obj.__proto__ === Object.prototype); // true

  hasOwnProperty는 Object.prototype의 매서드임

  console.log(obj.hasOwnProperty('a')); // true
  console.log(obj.hasOwnProperty('__proto__')); // false (상속 받은 프로퍼티이기 때문에)

  <<<< 예시 끝

  [6] prototype 프로퍼티
  생성자 함수로 호출할 수 있는 함수 객체만이 소유하는 프로퍼티
